- Back to the Basics! Essentials of Modern C++ Style - Herb Sutter - CppCon 2014
- Back to Basics: Virtual Dispatch and its Alternatives - Inbal Levi - CppCon 2019
- Back to Basics: Move Semantics (part 1 of 2) - Klaus Iglberger - CppCon 2019
- Back to Basics: Move Semantics (part 2 of 2) - Klaus Iglberger - CppCon 2019
- Back to Basics: Smart Pointers - Arthur O&amp;#39;Dwyer - CppCon 2019
- Back to Basics: Smart Pointers - Rainer Grimm - CppCon 2020
- Back to Basics: Exceptions - Klaus Iglberger - CppCon 2020
- Back to Basics: Casting - Brian Ruth - CppCon 2021
- Back to Basics: Designing Classes (part 1 of 2) - Klaus Iglberger - CppCon 2021
- Back to Basics: Designing Classes (part 2 of 2) - Klaus Iglberger - CppCon 2021
- Back To Basics: The Special Member Functions - Klaus Iglberger - CppCon 2021
- Back to Basics: Lambdas - Nicolai Josuttis - CppCon 2021
- Back to Basics: Move Semantics - Nicolai Josuttis - CppCon 2021
- Back to Basics: Debugging in C++ - Mike Shah - CppCon 2022
- Back to Basics: Templates in C++ - Nicolai Josuttis - CppCon 2022
- Back to Basics: Cpp Value Semantics - Klaus Iglberger - CppCon 2022
- Back to Basics: (Range) Algorithms in C++ - Klaus Iglberger - CppCon 2023
- Back to Basics: Iterators in C++ - Nicolai Josuttis - CppCon 2023
- Back to Basics: Debugging in Cpp - Greg Law - CppCon 2023
- C++17 in Breadth (part 1 of 2) - Alisdair Meredith - CppCon 2016
- C++17 in Breadth (part 2 of 2) - Alisdair Meredith - CppCon 2016
- Getting Allocators out of Our Way - Alisdair Meredith &amp; Pablo Halpern - CppCon 2019
- Reflection in C++ - Past, Present, and Hopeful Future - Andrei Alexandrescu - CppCon 2022
- Expect the expected - Andrei Alexandrescu - CppCon 2018
- Reflection in C++ - Past, Present, and Hopeful Future - Andrei Alexandrescu - CppCon 2022
- Robots Are after Your Job: Exploring Generative AI for C++ - Andrei Alexandrescu - CppCon 2023
- Concepts in 60: Everything you need to know and nothing you don&amp;#39;t - Andrew Sutton - CppCon 2018
- Trivially Relocatable - Arthur O&amp;#39;Dwyer - CppCon 2018
- Deducing this Patterns - Ben Deane - CppCon 2021
- std:: exchange Idioms - Ben Deane - CppCon 2017
- Applicative: The Forgotten Functional Pattern in C++ - Ben Deane - CppNow 2023
- Lightning Talk: A Static Alternative to Virtual Functions, Using Expression SFINAE - Ben Deane - CppCon 2016
- Ligntning Talk: Easing into Modern C++ - Ben Deane - C++Now 2018
- Ligntning Talk: How We Used To Be - Ben Deane - CppCon 2020
- Lightning Talk: C++20 Lambdas: Familiar Template Syntax - Ben Deane - CppCon 2020
- Lightning Talk: The Process Is The Problem - Ben Deane - CppCon 2021
- constexpr ALL the Things! - Ben Deane &amp; Jason Turner - CppCon 2017
- Operator Overloading: History, Principles and Practice - Ben Deane - CppCon 2018
- Keynote: Optimizing for Change in C++ - Ben Deane - CppNorth 2023
- Easy to Use, Hard to Misuse: Declarative Style in C++ - Ben Deane - CppCon 2018
- Why you should avoid Linked Lists - Bjarne Stroustrup - GoingNative 2012
- Make Simple Tasks Simple! - Bjarne Stroustrup - CppCon 2014
- The Essence of C++ - Bjarne Stroustrup
- Writing Good C++14 - Bjarne Stroustrup - CppCon 2015
- The Evolution of C++ Past, Present and Future - Bjarne Stroustrup - CppCon 2016
- Learning and Teaching Modern C++ - Bjarne Stroustrup - CppCon 2017
- Concepts: The Future of Generic Programming (the future is here) - Bjarne Stroustrup - CppCon 2018
- Keynote: What can C++ do for embedded systems developers? - Bjarne Stroustrup - NDC Techtown 2018
- C++20: C++ at 40 - Bjarne Stroustrup - CppCon 2019
- Plenary: The Beauty and Power of &amp;quot;Primitive&amp;quot; C++ - Bjarne Stroustrup - CppCon 2020
- Bjarne Stroustrup: C++ | Lex Fridman Podcast #48
- Type-and-resource Safety in Modern C++ - Bjarne Stroustrup - CppCon 2021
- C++20: Reaching for the Aims of C++ - Bjarne Stroustrup - CppCon 2021
- C++ in Constrained Environments - Bjarne Stroustrup - CppCon 2022
- Hardening C++ with Bjarne Stroustrup - BjarneStroustrup - Software Daily
- Approaching C++ Safety - Bjarne Stroustrup - Core C++ 2023
- Delivering Safe C++ - Bjarne Stroustrup - CppCon 2023
- C++17 Features (part 1 of 2) -Bryce Adelstein Lelbach - CppCon 2017
- Multidimensional C++ - Bryce Adelstein Lelbach - CppNorth 2022
- The C++ Execution Model - Bryce Adelstein Lelbach - CppCon 2018
- What is C++ - Chandler Carruth, Titus Winters - CppCon 2019
- High Performance Code 201: Hybrid Data Structures - Chandler Carruth - CppCon 2016
- LLVM: A Modern, Open C++ Toolchain - Chandler Carruth - Pacific++ 2017
- Documentation in the Era of Concepts and Ranges - Christopher Di Bella &amp; Sy Brand - CppCon 2021
- Discovering a User-Facing Concept - Christopher Di Bella - CppCon 2021
- Removing Metaprogramming From C++, Part 1 of N: constexpr Function Params - David Stone - CppCon 2019
- Implementing static_vector: How Hard Could it Be? - David Stone - CppCon 2021
- Faster, Easier, Simpler Vectors - David Stone - CppCon 2021
- Lightning Talk: Quantum Interpretations of the C++ Object Model - David Stone - CppCon 2021
- Ranges for the Standard Library - Eric Niebler - CppCon 2015
- Working with Asynchrony Generically: A Tour of C++ Executors (part 1/2) - Eric Niebler - CppCon 2021
- Working with Asynchrony Generically: A Tour of C++ Executors (part 2/2) - Eric Niebler - CppCon 2021
- Rich Code for Tiny Computers: A Simple Commodore 64 Game in C++17 - Jason Turner - CppCon 2016
- Thinking Portable: How and why to make your C++ cross platform - Jason Turner - CppNow 2016
- constexpr ALL the Things! - Ben Deane &amp; Jason Turner - CppCon 2017
- C++ Code Smells - Jason Turner - CppCon 2019
- The Best Parts of C++ - Jason Turner - CppCon 2019
- *(char*)0 = 0; - What Does the C++ Programmer Intend With This Code? - JF Bastien - C++ on Sea 2023
- Stop Teaching C - Kate Gregory - CppCon 2015
- 10 Core Guidelines You Need to Start Using Now -  Kate Gregory - CppCon 2017
- Simplicity: not just for beginners - Kate Gregory [ACCU 2018] - YouTube
- Simplicity: Not Just For Beginners - Kate Gregory - CppCon 2018
- What Do We Mean When We Say Nothing At All? - Kate Gregory - CppCon 2018
- Naming is Hard: Let&amp;#39;s Do Better - Kate Gregory - CppCon 2019
- What Do We Mean When We Say Nothing At All? - Kate Gregory [ACCU 2019] - YouTube
- Naming is Hard: Let&amp;#39;s Do Better - Kate Gregory - C++ on Sea 2020
- Naming is Hard: Let&amp;#39;s Do Better - Kate Gregory - ACCU 2021
- Keynote: Abstraction Patterns - Kate Gregory - NDC TechTown 2022
- Keynote: Am I A Good Programmer? - Kate Gregory - CppNorth 2022
- Abstraction Patterns: Making Code Reliably Better Without Deep Understanding - Kate Gregory - ACCU 2022
- Keynote: Become a Better Programmer by Using Words and Ideas From Casual Gaming - Kate Gregory - ACCU 2023
- Keynote: Emotional Code - ACCU Conference 2019 - Kate Gregory
- Free Your Functions! - Klaus Iglberger - CppCon 2017
- Back to Basics: Move Semantics (part 1 of 2) - Klaus Iglberger - CppCon 2019
- Back to Basics: Move Semantics (part 2 of 2) - Klaus Iglberger - CppCon 2019
- Back to Basics: Exceptions - Klaus Iglberger - CppCon 2020
- Back to Basics: Designing Classes (part 1 of 2) - Klaus Iglberger - CppCon 2021
- Back to Basics: Designing Classes (part 2 of 2) - Klaus Iglberger - CppCon 2021
- Design Patterns: Facts and Misconceptions - Klaus Iglberger - CppCon 2021
- Back To Basics: The Special Member Functions - Klaus Iglberger - CppCon 2021
- Back to Basics: Cpp Value Semantics - Klaus Iglberger - CppCon 2022
- Back to Basics: (Range) Algorithms in C++ - Klaus Iglberger - CppCon 2023
- Regular Expressions Redefined in C++ - Hana Dusikova - CppCon 2017
- atomic Weapons 1 of 2 - Herb Sutter - C++ and Beyond 2012
- atomic Weapons 2 of 2 - Herb Sutter - C++ and Beyond 2012
- Lock-Free Programming (or, Juggling Razor Blades), Part I - Herb Sutter - CppCon 2014
- Lock-Free Programming (or, Juggling Razor Blades), Part II - Herb Sutter - CppCon 2014
- Back to the Basics! Essentials of Modern C++ Style - Herb Sutter - CppCon 2014
- Writing Good C++14... By Default - Herb Sutter - CppCon 2015
- Leak-Freedom in C++... By Default - CppCon 2016 - Herb Sutter
- Thoughts on a more powerful and simpler C++ (5 of N)” - Herb Sutter - CppCon 2018
- Extending and Simplifying C++: Thoughts on Pattern Matching using `is` and `as` - Herb Sutter - CppCon2021
- Meta: Thoughts on generative C++ - Herb Sutter - CppCon 2017
- De-fragmenting C++: Making Exceptions and RTTI More Affordable and Usable - Herb Sutter - CppCon 2019
- Empirically Measuring, &amp; Reducing, C++’s Accidental Complexity - Herb Sutter - CppCon 2020
- C++ Standards Committee Fireside Chat hosted by Herb Sutter - CppCon 2020 - YouTube
- Can C++ be 10x Simpler &amp; Safer? - Herb Sutter - CppCon 2022
- Keynote: The Evolution of C++ - A Typescript for C++ - Herb Sutter - CppNow 2023
- Plenary: Cooperative C++ Evolution – Toward a Typescript for C++ - Herb Sutter - CppCon 2023
- A C++14 approach to dates and times - Howard Hinnant - CppCon 2015
- A ＜chrono＞ Tutorial - Howard Hinnant - CppCon 2016
- Welcome To The Time Zone - Howard Hinnant - CppCon 2016
- ＜chrono＞ Then and Now - Howard Hinnant - CppCon 2018
- Back to Basics: Virtual Dispatch and its Alternatives - Inbal Levi - CppCon 2019
- Customization Methods: Connecting User and C++ Library Code - Inbal Levi - CppCon 2023
- A C++ Approach to Physical Units - Mateusz Pusz - CppCon 2019
- The Nightmare of Move Semantics for Trivial Classes - Nicolai Josuttis - CppCon 2017
- The Nightmare of Initialization in C++ - Nicolai Josuttis - CppCon 2018
- C++17: The Best Features - Nicolai Josuttis - ACCU 2018
- 50 shades of C++ - Nicolai Josuttis - Meeting C++ 2018 Closing Keynote
- When C++ Style Guides Contradict - Nicolai Josuttis - CppCon 2019
- The Hidden Secrets of Move Semantics - Nicolai Josuttis - CppCon 2020
- Why and How we fixed std::thread by std::jthread - Nicolai Josuttis - C++ on Sea 2020
- Back to Basics: Move Semantics - Nicolai Josuttis - CppCon 2021
- C++20: My Favorite Code Examples - Nico Josuttis - Meeting C++ 2021
- Back to Basics: Lambdas - Nicolai Josuttis - CppCon 2021
- Back to Basics: Templates in C++ - Nicolai Josuttis - CppCon 2022
- Belle Views on C++ Ranges, their Details and the Devil - Nico Josuttis - Meeting C++ 2022
- Universal/Forwarding References - Nicolai Josuttis - Meeting C++ 2022
- Back to Basics: Iterators in C++ - Nicolai Josuttis - CppCon 2023
- Using the filter view in practice - Nicolai Josuttis - Meeting C++ 2023
- Failing Successfully: Reporting and Handling Errors - Robert Leahy - CppCon 2021
- Taking a Byte Out of C++: Avoiding Punning by Starting Lifetimes - Robert Leahy - CppCon 2022
- Lightning Talk: I Need a Different Variant in C++ - Robert Allan Hennigan Leahy - C++ on Sea 2023
- C++ Seasoning - Sean Parent - GoingNative 2013
- Inheritance Is The Base Class of Evil - Sean Parent - GoingNative 2013
- Better Code: Data Structures - Sean Parent - CppCon 2015
- Better Code: Concurrency - Sean Parent - NDC London 2017
- (undefined behaviour) Secret Lightning Talks: Polymorphic Task - Sean Parent - Meeting C++ 2017
- Better Code: Human Interface - Sean Parent - CppCon 2018
- Better Code: Relationships - Sean Parent - CppCon 2019
- Warning: std::find() is Broken! - Sean Parent - CppCon 2021
- All the Safeties: Safety in C++ - Sean Parent - CppNow 2023
- Better Code: Runtime Polymorphism - Sean Parent - NDC London 2017
- Type Deduction and Why You Care - Scott Meyers - CppCon 2014
- How to Write Well-Behaved Value Wrappers - Simon Brand - CppCon 2018
- Documentation in the Era of Concepts and Ranges - Christopher Di Bella &amp; Sy Brand - CppCon 2021
- What’s New in C++23 - Sy Brand - CppCon 2022 - YouTube
- STL Features And Implementation Techniques - Stephan T. Lavavej - CppCon 2014
- functional: What&amp;#39;s New, And Proper Usage - Stephan T. Lavavej - CppCon 2015
- Don&amp;#39;t Help the Compiler - Stephan T. Lavavej - GoingNative 2013
- Readable C++ - Timur Doumler - CppCon 2016
- Want fast C++? Know your hardware! - Timur Doumler - CppCon 2016
- Can I has grammar? - Timur Doumler - CppCon 2018
- Class template argument deduction in C++17 - Timur Doumler - CppCon 2018
- Type punning in modern C++ - Timur Doumler - CppCon 2019
- ISO/IEC 14882 - Timur Doumler - CppCon 2019
- C++20: The small things - Timur Doumler - CppCon 2019
- How C++20 Changes the Way We Write Code - Timur Doumler - CppCon 2020
- Lightning Talk: Direct Aggregate Initialisation - Timur Doumler - CppCon 2021
- How C++23 Changes the Way We Write Code - Timur Doumler - CppCon 2022
- C++ Lambda Idioms - Timur Doumler - CppCon 2022
- Guide to Safety in C++ - Timur Doumler - CppNorth 2023
- Lightning Talk: Into the Lambdaverse - Weird C++ Lambda Shenanigans - Timur Doumler - CppNow 2023
- Keynote: C++ Contracts, Testing &amp; the Pursuit of Well Defined Behaviour - Timur Doumler - CppNorth23
- Maintainability and Refactoring Impact of Higher-Level Design Features - Titus Winters - CppCon 2019
- What is C++ - Chandler Carruth, Titus Winters - CppCon 2019
- C++ Past vs. Future - Titus Winters - Pacific++ 2018
- An Overview of Standard Ranges - Tristan Brindle - CppCon 2019
- C++20 Ranges in Practice - Tristan Brindle - CppCon 2020
- Quick Game Development with C++11 / C++14 - Vittorio Romeo - CppCon2014
- Moving an `int` Is Slow: Debug Performance Matters! - Vittorio Romeo - ACCU 2022
- Lightning Talk: quick-bench.com - Fred Tingaud - CppCon 2017
- Lightning Talk: This is Why We Can’t Have Nice Things - Jon Kalb - CppCon 2018
- Lightning Talk: One Friend Ain&amp;#39;t Enough - Jody Hagins - CppNow 2021
- Lightning Talk: CodeCompass: An open source code navigator for C++ based on LLVM/Clang - Gábor Horváth - CppCon 2016
- Lightning Talk: C++ Debug Performance is Improving: What Now? - Vittorio Romeo - CppCon 2022
- Lightning Talk: Become A Game Developer In 5 Minutes Or Less - Mathieu Ropert - CppCon 2020
- Lightning Talk: MP: ~~Template~~ Meta-Programming in C++ - Kris Jusiak - CppCon 2022
- Lightning Talk: Modernizing SFML in Cpp - Chris Thrasher - CppCon 2022
- Lightning Talk: Finding Whether a Number is a Power of 2 - Ankur Satle - CppCon 2022
- Lightning Talk: C++20 - A New Way of Meta-Programming? - Kris Jusiak - CppCon 2022
- Lightning Talk: 2D Graphics with SFML - Lukas Dürrenberger - Meeting C++ 2018 Lightning Talks
- Lightning Talk: Static Reflection on the Budget in C++23 - Kris Jusiak - CppNow 2023
- Lightning Talk: Writing a Lookup Table in C++ - Richard Smith - CppNow 2023
- Lightning Talk: Source/Sink vs. Ranges in C++ - What&amp;#39;s the Difference? - Tony Van Eerd - CppNow 2023
- Lightning Talk: Into the Lambdaverse - Weird C++ Lambda Shenanigans - Timur Doumler - CppNow 2023
- Lightning Talk: When C++ Singletons Fail... Richard Shepherd - C++ on Sea 2023
- Lightning Talks: 5 Things You Didn&amp;#39;t Know Your CPU Did For You - Matt Godbolt - C++ on Sea 2023
- Lightning Talks: Reading CSV Files with Standard C++ - Jens Weller - Meeting C++ 2023
- 105 STL Algorithms in Less Than an Hour - Jonathan Boccara - CppCon 2018
- C++23 Standard Library Preview - Jeff Garland - CppCon 2021
- C++20’s ＜chrono＞ Calendars and Time Zones in MSVC - Miya Natsuhara - CppCon 2021
- Back to Basics: Casting - Brian Ruth - CppCon 2021
- Variants: Past, Present, and Future - David Sankel - CppCon 2016
- Mix Tests and Production Code With Doctest... - Viktor Kirilov - CppCon 2017
- Generic Graph Libraries in C++20 - Andrew Lumsdaine &amp; Phil Ratzloff - CppCon 2021
- &amp;quot;unit&amp;quot;_test: Implementing a Macro-free Unit Testing Framework from Scratch in C++20 - Kris Jusiak - CppCon 2021
- OOP Is Dead, Long Live Data-oriented Design - Stoyan Nikolov - CppCon 2018
- Effective replacement of dynamic polymorphism with std::variant - Mateusz Pusz - CppCon 2018
- Building a C++ Reflection System in One Weekend Using Clang and LLVM - Arvid Gerstmann - CppCon 2018
-  clang-useful: Building useful tools with LLVM and clang for fun and profit - P. Goldsborough - CppNow 2017
- What&amp;#39;s New in Conan 2.0 C/C++ Package Manager - Diego Rodriguez-Losada - CppCon 2022
- GitHub Features Every C++ Developer Should Know - Michael Price - CppCon 2022
- Reflection without Reflection TS - Fabian Renn Giles - Meeting C++ 2022
- Back to Basics: Debugging in C++ - Mike Shah - CppCon 2022
- Refactoring Legacy Codebases with LibTooling - James Bennett - CppCon 2018
- Bringing Clang-tidy Magic to Visual Studio C++ Developers - Victor Ciura - CppCon 2017
- Time Travel: Applying Gradual Typing to Time Types with Clang&amp;#39;s LibTooling - Hyrum Wright - CppCon 2019
- Colonies, performance and why you should care - Matthew Bentley - CppCon 2016
- Reproducible Developer Environments in C++ - Michael Price - CppCon 2022
- A Test a Day Keeps Your Manager Away! - Rian Quinn - CppCon 2017
- Custom Views for the Rest of Us - Jacob Rice - CppCon 2021
- What Is an Image? - Will Rosesrans - CppCon 2022
- C++ atomics, from basic to advanced. What do they really do? - Fedor Pikus - CppCon 2017
- Give me 15 minutes &amp; I&amp;#39;ll change your view of GDB - Greg Law - CppCon 2015
- Conan 2.0 demo - Chris McArthur - Meeting C++ online book &amp; tool fair
- Abstraction the true superpower of C++ - Guy Davidson - Meeting C++ 2022
- Multi Threading Model in Paradox Games: Past, Present and Future - Mathieu Ropert - CppCon 2021
- Game Audio Programming in C++ - Guy Somberg - CppCon 2017
- What C++ developers should know about globals (and the linker) - Nir Friedman - CppCon 2017
- Linux Debuginfo Formats - DWARF, ELF, dwo, dwp - What are They All? - Greg Law - CppCon 2022
- import CMake, CMake and C++20 Modules - Bill Hoffman - CppCon 2022
- SOLID, Revisited - Tony Van Eerd - CppNow 2021
- Data-Oriented Design and C++ - Mike Acton - CppCon 2014
- Branchless Programming in C++ - Fedor Pikus - CppCon 2021
- GDB: A Lot More Than You Knew - Greg Law - CppCon 2016
- What C++ Programmers Need to Know about Header ＜random＞ - Walter E. Brown - CppCon 2016
- How to Write Effective Documentation for C++ Libraries... - Robert Ramey - CppCon 2017
- Adapting C++20 Ranges Algorithms for Most Metaprogramming Needs in Fewer Than 1,000 Lines of Code - Daisy Hollman &amp; Kris Jusiak - CppNow 2023
- What&amp;#39;s New in Compiler Explorer? - Matt Godbolt - C++ on Sea 2023
- Better Algorithm Intuition - Conor Hoekstra @code_report - Meeting C++ 2019
- Typical C++, But Why? - Björn Fahller - CppNorth 2023
- Most Malleable Memory Management Method in C++ - Björn Fahller - C++ on Sea 2023
- C++ Feature Coroutines, Beginner Friendly - Andreas Fertig - CppNorth 2023
- Value Oriented Programming. Part 1: You Say You Want To Write A Function - Tony Van Eerd - CppNorth 22
- Value Oriented Programming Part V: Return of the Values - Tony Van Eerd - CppNorth 2023
- What Has My Compiler Done for Me Lately? Unbolting the Compiler&amp;#39;s Lid - Matt Godbolt - CppCon 2017
- More C++ Ranges Please - Roi Barkan - CppCon 2023
- Expressing Implementation Sameness and Similarity: Polymorphism in Modern C++ - Daisy Hollman - CppCon 2023
- Exceptionally Bad: The Misuse of Exceptions in C++ &amp; How to Do Better - Peter Muldoon - CppCon 2023
- C++ Modules: Getting Started Today - Andreas Weis - CppCon 2023
- A Common Package Specification: Getting Build Tools to Talk to Each Other: Lessons Learned From Making thousands of Binaries Consumable by Any Build System - Diego Rodriguez-Losada - CppCon 2023
- C++20 Modules: The Packaging and Binary Redistribution Story - Luis Caro Campos - CppCon 2023
- Undefined Behavior is Not an Error - Barbara Geller &amp; Ansel Sermersheim - CppCon 2018
- How to Build Your First C++ Automated Refactoring Tool - Kristen Shaker - CppCon 2023
- Conan 2.0 - C and C++ Package Manager Documentation — conan 2.0.0 documentation
- Why not Conan? - Diego Rodriguez-Losada - CppCon 2016
- Conan, a C and C++ package manager for developers - Diego Rodriguez-Losada - CppCon 2016
- Why not Conan (part II)? - Diego Rodriguez-Lopez - CppCon 2017
- Why not Conan (part III)? - Diego Rodriguez-Losada - CppCon 2018
- Why Conan? 5 reasons to use Conan package manager - Diego Rodriguez-Losada - CppCon 2019
- Why Conan (part II, 5 reasons to use Conan in 2020) - Diego Rodriguez-Losada - CppCon 2020
- What&amp;#39;s New in Conan 2.0 C/C++ Package Manager - Diego Rodriguez-Losada - CppCon 2022
- What&amp;#39;s new in Conan 2.0 - CoreCppIL - Christopher McArthur
- CMake and Conan: past, present and future - Diego Rodriguez-Losada - Meeting C++ 2023
- (discouraged) C++ Development with Visual Studio Code - Rong Lu - CppCon 2017
- (discouraged) Concepts in C++20: Revolution or Evolution - Rainer Grimm - CppCon 2019
- (discouraged) C++20 String Formatting Library: An Overview and Use with Custom Types - Marc Gregoire - CppCon 2020
- (discouraged) Back to Basics: Unit Tests - Ben Saks - CppCon 2020
- (discouraged) The Hidden Performance Price of C++ Virtual Functions - Ivica Bogosavljevic - CppCon 2022
- (discouraged) Text - Corentin Jabot - CppCon 2019
- (discouraged) New in Visual Studio Code! Clang-Tidy, makefile, CMake, GitHub, &amp; More - Marian Luparu, Sinem Akinci - CppCon 2022
- (discouraged) Back to Basics: Concurrency - Mike Shah - CppCon 2021
- (discouraged) This Videogame Programmer Used the STL and You Will Never Guess What Happened Next - Mathieu Ropert - CppCon 2019
- (discouraged) Modern C and What We Can Learn From It - Luca Sas - ACCU 2021
- (discouraged) Game engine using STD C++ 11 - Jason Jurecka - CppCon 2016
- (discouraged) The Quiet Little Gem in Modern C++: ＜system_error＞ - Charles Bay - CppCon 2017
- (discouraged) Lightning Talk: Cute Approach for Polymorphism in C++ - Liad Aben Sour Asayag - CppCon 2022
- (discouraged) I Just Wanted a Random Integer! - Cheinan Marks - CppCon 2016
- (discouraged) ASTImporter: Merging Clang ASTs - G. Márton - 2019 LLVM Developers’ Meeting
- (discouraged) Lightning Talk: operator for - C++ Generator Ranges Without Coroutine Overhead - Jonathan Müller
- (discouraged) C++ Common Knowledge - Dawid Zalewski - Meeting C++ 2023
- STL and Its Design Principles - Alexander Stepanov
- C++ Weekly

  - SE.Why -0xFFFFFFFF == 1
  - Chapter 1 - Answers
  - Chapter 1 - Notes
  - Chapter 2 - Answers
  - Chapter 2 - Notes
  - Chapter 3 - Notes
  - Chapter 4 - The Evolution of Lambdas
  - Chapter 5 - Lambdas To The Limits
  - 6.Intro To Variadic Templates
  - 7.Stop Using std::endl - YouTube
  - 9.std::future Quick-Start
  - 10.Variadic Expansion Wrap-Up
  - 11.std::future Part 2
  - 12.C++17&amp;#39;s std::any
  - 13.Fibonacci: You&amp;#39;re Doing It Wrong
  - 14 Standard Library Gems: `next` and `exchange`
  - 15.Using `std::bind`
  - 16.Avoiding `std::bind`
  - 17.C++17&amp;#39;s `std::invoke` 
  - SE.Using C++17&amp;#39;s constexpr if
  - 18.C++17&amp;#39;s constexpr if
  - 20.C++17&amp;#39;s Fold Expressions
  - 21.C++17&amp;#39;s `if` and `switch` Init Statements
  - 22.C++17&amp;#39;s Nested Namespaces and `std::clamp`
  - 23.C++17&amp;#39;s __has_include
  - 24.C++17&amp;#39;s Structured Bindings
  - 25.C++17&amp;#39;s Aggregate Initializations
  - 26.Language Features Removed in C++17
  - 27.C++17 Changes To Sequence Containers
  - 28.C++17&amp;#39;s [[fallthrough]] Attribute - YouTube
  - 29.C++17&amp;#39;s [[maybe_unused]] Attribute - YouTube
  - 30.C++17&amp;#39;s [[nodiscard]] Attribute - YouTube
  - 32.Lambdas For Free
  - 33.Start Using Default Member Initializers
  - 34.Reading Assembly Language - Part 1
  - 35.Reading Assembly Language - Part 2
  - 36.Reading Assembly Language - Part 3
  - 37.Stateful Lambdas
  - 38.C++17&amp;#39;s Class Template Argument Type Deduction
  - 39.C++17&amp;#39;s Deduction Guides
  - 40.Inheriting From Lambdas
  - 41.C++17&amp;#39;s constexpr Lambda Support
  - 42.Clang&amp;#39;s Heap Elision
  - 48.C++17&amp;#39;s Variadic `using`
  - 49.Why Inherit From Lambdas?
  - 50.Inheriting Lambdas vs Generic Lambdas
  - 51.Advanced Stateful Lambdas
  - 53.Gotos Are Everywhere
  - 60.std::quoted
  - 61.Storage Duration with Lambdas
  - 64.C++11&amp;#39;s std::min (and my version)
  - 65.C++11&amp;#39;s std::fmin
  - 66.Variadic fmin for C++11
  - 67.C++17&amp;#39;s std::gcd and std::lcm
  - 69.C++17&amp;#39;s Searchers
  - 71.Hidden C++ 17 - Part 1
  - 72.Hidden C++17 - Part 2
  - 75.Why You Cannot Move From Const
  - 81.Basic Computer Architecture
  - 83.Installing Compiler Explorer
  - 87.std::optional
  - 88.Don&amp;#39;t Forget About puts
  - 89.Overusing Lambdas
  - 92.function-try-blocks
  - 93.Custom Comparators for Containers
  - 94.Lambdas as Comparators
  - 95.Transparent Comparators
  - 96.Transparent Lambda Comparators
  - 97.Lambda To Function Pointer Conversion
  - 98.Precision Loss with Accumulate
  - 99.C++ 20&amp;#39;s Default Bit-field Member Initializers
  - 100.All The Assignment Operators
  - 106.Disabling Move From const
  - 107.The Power of =delete
  - 108.Understanding emplace_back
  - 109.When noexcept Really Matters
  - 116.Trying Out The Conan Package Manager
  - 122.`constexpr` With `optional` And `variant`
  - 123.Using in_place_t
  - 125.The Optimal Way To Return From A Function
  - 126.Lambdas With Destructors
  - 127.C++20&amp;#39;s Designated Initializers
  - 128.C++20&amp;#39;s Template Syntax For Lambdas
  - 129.The One Feature I&amp;#39;d Remove From C++
  - 130.C++20&amp;#39;s for init-statements
  - 132.Lambdas In Fold Expressions
  - 133.What Exactly IS A Lambda Anyhow?
  - 134.The Best Possible Way To Create A Visitor?
  - 135.{fmt} is Addictive! Using {fmt} and spdlog
  - 136.How `inline` Might Affect The Optimizer
  - 137.C++ Is Not An Object Oriented Language
  - 139.References To Pointers
  - 140.Use `cout`, `cerr`, and `clog` Correctly
  - 141.C++20&amp;#39;s Designated Initializers And Lambdas
  - 142.Short Circuiting With Logical Operators
  - 144.Pure Functions in C++
  - 146.C++20&amp;#39;s std::to_address
  - 149.C++20&amp;#39;s Lambda Usability Changes
  - 150.C++20&amp;#39;s Lambdas For Resource Management
  - 151.C++20&amp;#39;s Lambdas As Custom Comparators
  - 152.Lambdas: The Key To Understanding C++
  - 159.`constexpr` `virtual` Members In C++20
  - 162.Recursive Lambdas
  - 165.C++20&amp;#39;s is_constant_evaluated()
  - 166.C++20&amp;#39;s Uniform Container Erasure
  - 168.Discovering Warnings You Should Be Using
  - 169.C++20 Aggregates With User Defined Constructors
  - 170.C++17&amp;#39;s `inline` Variables
  - 171.C++20&amp;#39;s Parameter Packs In Captures
  - 172.Execution Support in Compiler Explorer
  - 173.The Important Parts of C++98 in 13 Minutes
  - 174.C++20&amp;#39;s `std::bind_front`
  - 175.Spaceships in C++20: operator 〈=〉
  - 176.Important Parts of C++11 in 12 Minutes
  - 177.`std::bind_front` Implemented With Lambdas
  - 178.The Important Parts of C++14 In 9 Minutes
  - 181.Fixing Our bind_front with std::invoke
  - 183.Start Using Raw String Literals
  - 184.What Are Higher Order Functions?
  - 185.Stop Using reinterpret_cast!
  - 186.What Are Callables?
  - 187.C++20&amp;#39;s `constexpr` Algorithms
  - 188.C++20&amp;#39;s `constexpr` `new` Support
  - 189.C++14&amp;#39;s Variable Templates
  - 190.The Important Parts of C++17 in 10 Minutes
  - 192.Stop Using Double Underscores
  - 193.C++20&amp;#39;s `contains` Members
  - 194.From SFINAE To Concepts With C++20
  - 195.C++20&amp;#39;s `constinit`
  - 196.What is `requires requires`?
  - 198.Surprise Uses For `explicit` Constructors
  - 199.[[nodiscard]] Constructors And Their Uses
  - 200.Christmas Class 2019 - Chapter 1 of 5 - Understanding Lambdas
  - 201.Christmas Class 2019 - Chapter 2 of 5 - Building On Lambdas
  - 202.Christmas Class 2019 - Chapter 3 of 5 - Utilizing Lambdas
  - 203.Christmas Class 2019 - Chapter 4 of 5 - The Evolution of Lambdas
  - 204.Christmas Class 2019 - Chapter 5 of 5 - Lambdas To The Limits
  - 205.Christmas Class 2019 - Chapter 5 of 5 Answers
  - 206.Surprising Conversions with CTAD
  - 207.C++20&amp;#39;s jthread and stop_token
  - 211.C++20&amp;#39;s Bit Manipulation Functions
  - 213.CTRE: Compile Time Regular Expressions
  - 216.C++20&amp;#39;s lerp, midpoint And Why They Are Necessary
  - 218.C++20&amp;#39;s std::to_array
  - 220.C++20&amp;#39;s [[likely]] and [[unlikely]] With Practical use Case
  - 223.Know Your Standard Library: std::nextafter
  - 225.Understanding Operator Overloading
  - 228.C++20&amp;#39;s (High Precision) Mathematical Constants
  - 229.C++20: Why Deprecate The Comma Operator?
  - 231.Multiple Destructors in C++20?! How and Why
  - 232.C++20&amp;#39;s `using enum`
  - 233.std::map vs constexpr map (huge perf difference!)
  - 234.map[] vs map.at()
  - 237.Teach Yourself C++ in ∞ Days
  - 238.const mutable Lambdas?
  - 239.std::mem_fun vs std::mem_fn Fight!
  - 240.Start Using [[nodiscard]]! - YouTube
  - 241.Using `explicit` to Find Expensive Accidental Copies
  - 242.Design By Introspection in C++20 (concepts + if constexpr)
  - 246.(+[](){})() What Does It Mean?
  - 249.Types That Shall Not Be Named
  - 251.constexpr Parameters With C++20&amp;#39;s CNTTP
  - 253.C++20 is Official! How To Get Your Copy of the Standard - YouTube
  - 254.C++23&amp;#39;s signed / unsigned size_t Literals
  - 256.C++11&amp;#39;s Garbage Collector
  - 257.Garbage In, Garbage Out - Why Initialization Matters
  - 258.The Awesome Power of C++20&amp;#39;s std::source_location - YouTube
  - 259.CRTP: What It Is, Some History and Some Uses
  - 261.C++20&amp;#39;s New consteval Keyword - YouTube
  - 262.std::string&amp;#39;s 11 Confusing Constructors
  - 264.Covariant Return Types and Covariant Smart Pointers
  - 265.C++20&amp;#39;s std::bit_cast
  - 266.C++20&amp;#39;s std::shift_left and std::shift_right
  - 267.C++20&amp;#39;s starts_with and ends_with
  - 269.How To Use C++20&amp;#39;s constexpr std::vector and std::string
  - 271.string.clear() vs string = &amp;quot;&amp;quot;
  - 276.C++20&amp;#39;s Conditionally `explicit` Conversions
  - 277.Quick Perf Tip: Avoid Integer Conversions
  - 278.`emplace_back` vs `push_back`
  - 279.Quick Perf Tip: Use The Right Iterator Comparison
  - 283.Stop Using const_cast!
  - 284.C++20&amp;#39;s Safe Integer Comparisons
  - 287.Understanding `auto`
  - 288.Quick Perf Tip: Prefer `auto`
  - 289.Returning From The `void`
  - 290.C++14&amp;#39;s Digit Separators and Binary Literals
  - 291.Start Using `as_const`
  - 292.Safely Using `goto` In C++
  - 296.Constraining `auto` in C++20
  - 304.C++23&amp;#39;s &amp;#39;if consteval&amp;#39;
  - 307.Making C++ Fun and Accessible
  - 312.Stop Using `constexpr` (And Use This Instead!)
  - 313.The `constexpr` Problem That Took Me 5 Years To Fix!
  - 315.constexpr vs static constexpr
  - 318.My Meetup Got Nerd Sniped! A C++ Curry Function
  - 322.Top 4 Places To Never Use `const`
  - 328.Recursive Lambdas in C++23
  - 328.Recursive Lambdas in C++23
  - 329.How LTO Easily Makes Your Program Faster
  - 330.Faster Builds with `extern template` (And How It Relates to LTO)
  - 331.This Game Teaches C++!
  - 332.C++ Lambda vs std::function vs Function Pointer
  - 333.A Simplified std::function Implementation
  - 334.How to Put a Lambda in a Container
  - 336.C++23&amp;#39;s Awesome std::stacktrace Library
  - 337.C23 Features That Affect C++ Programmers
  - 339.`static constexpr` vs `inline constexpr`
  - 340.Finally! A Simple String Split in C++!
  - 341.std format vs lib {fmt}
  - 342.C++20&amp;#39;s Ranges: A Quick Start
  - 343.Digging Into Type Erasure
  - 344.decltype(auto): An Overview of How, Why and Where
  - 345.No Networking in C++20 or C++23! Now What?
  - 346.C++23&amp;#39;s bind_back
  - 347.This PlayStation Jailbreak NEVER SHOULD HAVE HAPPENED
  - 350.The Right Way to Write C++ Code in 2022
  - 354.Can AI And ChatGPT Replace C++ Programmers?
  - 359.std::array&amp;#39;s Implementation Secret (That You Can&amp;#39;t Use!)
  - 361.Is A Better `main` Possible?
  - 362.C++ vs Python vs Python (jit) vs Python With C++!
  - 363.A (Complete?) Guide To C++ Unions
  - 365.Modulo (%): More Complicated Than You Think
  - 367.Forgotten C++: std::valarray
  - 368.The Power of template-template Parameters: A Basic Guide
  - 371.Best Practices for Using AI Code Generators (ChatGPT and GitHub Copilot)
  - 374.C++23&amp;#39;s out_ptr and inout_ptr
  - 375.Using IPO and LTO to Catch UB, ODR, and ABI Issues
  - 376.Ultimate CMake C++ Starter Template (2023 Updates)
  - 377.Looking Forward to C++26: What C++ Needs Next
  - 378.Should You Ever std::move An std::array?
  - 379.clang-tidy&amp;#39;s &amp;quot;Easily Swappable Parameters&amp;quot; Warning - And How to Fix It!
  - 380.What Are std::ref and std::cref and When Should You Use Them?
  - 381.C++23&amp;#39;s basic_string::resize_and_overwrite
  - 385.The Important Parts of C++20
  - 386.C++23&amp;#39;s Lambda Attributes
  - 391.Finally! C++23&amp;#39;s std::views::enumerate - YouTube
  - 392.Google&amp;#39;s Bloaty McBloatface
  - 393.C++23&amp;#39;s std::unreachable
  - 394.C++11&amp;#39;s Most Overlooked Feature: Delegating Constructors
  - 398.C++23&amp;#39;s zip_view
  - 399.C++23&amp;#39;s slide_view vs adjacent_view
  - 400.C++ is 40... Is C++ DYING?
  - 403.Easier Coroutines with CppCoro
  - C++ Weekly - 404.How (and Why) To Write Code That Avoids std::move
  - 407.C++98 Code Restoration
  - 408.Implementing C++23&amp;#39;s constexpr unique_ptr in C++20
  - 410.What Are Padding and Alignment? (And Why You Might Care)
  - Ep 411.Intro to C++ Exceptions - YouTube
  - 412.Possible Uses of C++23&amp;#39;s [[assume]] Attribute
  - 415.Moving From C++98 to C++11
  - 416. Moving From C++11 to C++14
  - 417.Turbocharge Your Build With Mold?
  - Ask.`std::exchange` vs `std::swap` 
  - Cᐩᐩ Weekly With Jason Turner - YouTube
  - SE.clang-tidy Auto Fixes in Compiler Explorer - Tribute to Hubert Matthews