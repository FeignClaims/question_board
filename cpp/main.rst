.. _cpp:

***********************************************************************************************************************
C++ 学习建议、环境配置等
***********************************************************************************************************************

.. danger::

  .. include:: dialectics_announcement/main.irst

.. _环境配置:

=======================================================================================================================
C++ 环境配置
=======================================================================================================================

哪怕按下面列出的 :ref:`Visual Studio 配置教程 (Windows 可用) <vscode_cpp_starter:vs>` 对 Visual Studio 进行额外配置, 它对于缺少分号、括号等简单错误的报错依旧非常糟糕, 因此我更建议你使用 :ref:`VSCode 配置教程 (Windows/MacOS/Linux 均可用) <vscode_cpp_starter:main>`.

- 直接装 `Visual Studio (Windows 可用) <https://visualstudio.microsoft.com/zh-hans/>`_ 就好; 当然更建议按下文配置 Visual Studio 或 **VSCode**.
- 如需在线编译运行, 可用 :doc:`Compiler Explorer </share_code/main>`, 它能检测 :cpp:`=` 错写成 :cpp:`==` 等 Visual Studio 默认没检查的问题.
- :ref:`Visual Studio 配置教程 (Windows 可用) <vscode_cpp_starter:vs>`, 在 Visual Studio 默认配置基础上添加自动格式化、代码行间显示报错、更多诊断.
- :ref:`VSCode 配置教程 (Windows/MacOS/Linux 均可用) <vscode_cpp_starter:main>`, 相比 Visual Studio 配置教程, 它还能 **自动添加头文件**, 有更丰富的字体和颜色, 且检查代码速度更快.

=======================================================================================================================
学习方法
=======================================================================================================================

以下学习方法均参考自 :doc:`/ppp2_chapter0`, :doc:`/ppp3_chapter0` 和《毛主席论教育革命》.

.. _跑起来:

-----------------------------------------------------------------------------------------------------------------------
在学会如何走得好看之前, 先跑起来
-----------------------------------------------------------------------------------------------------------------------

小孩子学走路从来不是从走路开始的, 而是向前猛跑摔倒几次, 有了走路的整体感觉, 再慢下来对各个过程进行准确的理解.

所以建议先将 C++ 整体内容粗略过一遍再进行细节学习, 这粗略的一遍不需要解决 "C++ 如何做到什么", 只需要解决 "C++ 可以做什么". 知道了可以做什么, 便能有效地学习或提问如何去做. 例如, 你不必掌握函数递归怎么写或怎么分析, 但在这一遍中会知道 C++ 可以进行递归.

-----------------------------------------------------------------------------------------------------------------------
不要记忆技术细节
-----------------------------------------------------------------------------------------------------------------------

"编程语言特性的存在是为了支持各种程序设计风格和技术. 因此, 编程语言的学习应该更关注掌握其固有的、内在的风格, 而不是试图了解每个语言特性的所有细节."

二进制原码和补码? 我不知道. :cpp:`int` 的大小? 我不知道. 运算符的结合性和优先级? 我不知道.

我不知道, 因为我没必要知道. 如果实在需要知道 :cpp:`int` 的大小 (它并不固定) 那可以去查, 如果实在不清楚运算符的结合性优先级那可以加括号. 问题在于, 知道这些细节会帮助初学者写出程序吗? 对于初学者, 更重要的是如 :ref:`跑起来` 所述建立起对编程的感性认识. 这些细节并不是学习的重点, 且 **在有了总体认识后很容易补充上**.

考试可能是闭卷考试, 但编程不是, 编程学习过程也不是. :doc:`/searching_method/main`

.. _实际编程:

-----------------------------------------------------------------------------------------------------------------------
实际编程
-----------------------------------------------------------------------------------------------------------------------

请阅读

- `《人的正确思想是从哪里来的？》`_.
- 或更详细的 `《实践论》`_.
- 或更更详细的 `《辩证法唯物论（讲授提纲）》`_.

明确编程能力不是靠听课听来的, 而是从实际的编程中理解掌握的.

实际的编程并不一定是刷力扣题等 (从考试的角度, 刷力扣题是偏题的; 从编程语言学习的角度, 刷力扣题是有害的), 对于新手来说可以是抄书上例题实际运行进行理解, 可以是对一些突发奇想加以实际验证, 可以是学习练习如何使用软件等等.

.. _学习使用软件:

-----------------------------------------------------------------------------------------------------------------------
学习使用软件
-----------------------------------------------------------------------------------------------------------------------

软件是你的朋友, 手写代码不报错不算什么能力, 能用合适的软件写代码才是能力. 例如, 建议学习:

- 阅读报错信息.
- :doc:`进行断点调试 </debugger/main>` 查找代码中的逻辑错误.
- :doc:`如何自动格式化代码 </formatter/main>` 查找代码中的语法错误 (少加分号、括号不匹配等).
- ``#include <cassert>`` 里的 :cpp:`assert(condition)`.

**学会这些比多刷几道力扣题提升更大**.

------------------------------------------------------------------------------------------------------------------------
使用最新的软件
------------------------------------------------------------------------------------------------------------------------

:ref:`学习使用软件` 中所说的用合适的软件还意味着 **你应该用最新的软件**.

如果仅仅因为考试时用的软件是 Dev-C++、VS 2010 等就在平时的学习中使用这些软件, 只会严重影响新手的学习: 它们因为过老不会为新手提供某些报错, 甚至可能没有 :doc:`断点调试 </debugger/main>` 或 :doc:`自动格式化 </formatter/main>` 等功能.

既然有的新手所主张的 "面向考试学习" 是为了考试取得好成绩, 使用这些影响自己学习的软件岂不是本末倒置? 上文 :ref:`跑起来` 已经强调了, 新手需要在走得好看之前跑起来, 而当新手通过在 :ref:`最新软件 <环境配置>` 上持之以恒地练习从而入门程序设计后, 熟悉考试软件只需要一两天时间.

此外, 哪怕按 :ref:`Visual Studio 配置教程 (Windows 可用) <vscode_cpp_starter:vs>` 对 Visual Studio 进行额外配置, 它对于缺少分号、括号等简单错误的报错依旧非常糟糕, 我更建议你使用 :ref:`VSCode 配置教程 (Windows/MacOS/Linux 均可用) <vscode_cpp_starter:main>`.

------------------------------------------------------------------------------------------------------------------------
不要通过询问人工智能大模型学习
------------------------------------------------------------------------------------------------------------------------

人工智能大模型如 chatgpt 等不存在同理心, 主观上并不知道什么代码是好的, 什么代码是适合初学者的等等. 因此, 询问它所获得的建议往往会影响你的学习. **我基本一直在群里**, 如果有问题, 请尝试询问我解决.

如果实在需要使用人工智能大模型, 请在提问时加上:

我是 C++ 初学者, 现在想向你询问问题. 你必须采用 C++20 标准 (但我是初学者, 请不要用非常专业的特性, 当然一些更符合 C++ 理念的特性可以使用), 并遵循 C++ 最佳实践 (主要基于《C++ 核心准则》) 回答我的问题, 这样的回复才是可接受的. 在解决我的疑惑之后, 请为我提供基于最佳实践的改进方案, 并且对于新出现的特性进行详细说明, 解释为什么我原来的方案不好, 而现在的方案更好. 接下来是我的问题.

-----------------------------------------------------------------------------------------------------------------------
更多学习方法
-----------------------------------------------------------------------------------------------------------------------

更多学习方法请直接阅读 :doc:`/ppp2_chapter0` 和《毛主席论教育革命》.

.. _非应试自学学习路径:

=======================================================================================================================
非应试自学学习路径
=======================================================================================================================

学习路径分为 :ref:`非应试自学学习路径` 和 :ref:`应试教育学习路径`. 非应试入门其实更为简单, 并且如果已经非应试入门, 补全应试知识点不过是一两天的事.

- :ref:`学习大纲_入门`
- :ref:`学习大纲`
- `我的 C++ 浏览器书签 (2024/08/30) (右键另存为再导入到浏览器)`_
- `我的 C++ 订阅源 (2024/08/30) (右键另存为再导入浏览器 feedbro 插件)`_

.. admonition:: 为什么会有应试和非应试的区别?
  :class: dropdown

  **C++ 越新越简单**, 但很多教学 (尤其是大学中) 采用了旧版 C++, 因为:

  - 老师并不都以 C++ 为主要语言, 对 C++ 使用理念和发展路线不太熟悉.
  - 课程教 C++ 只是在利用 C++ 多编程范式的特点, 让学生了解诸如面向对象、面向过程、数据抽象等编程范式, 并不着重于学好 C++.
  - 课程大纲偷懒不愿更新罢了, 很多老师的 PPT 仍是十几年前的, 而实验作业也是祖传的 (甚至其中诸多错误始终没更正).

  C++ 拥有 "向后兼容性", 即新版本也能直接使用依据旧版本编写的代码.
  这种 "向后兼容性" 本意是为了让程序员流畅地学习新版本特性, 同时保证旧有代码依然能执行, 但却被人利用来躲在旧版本舒适区.

  新版本 C++ 拥有更简单的语法、更灵活的特性, 一套完整规范的 `C++ Core Guidelines`_ 和每年举行的诸多社区分享活动 (CppCon、CppNow、cpponsea……).

.. _应试教育学习路径:

=======================================================================================================================
应试教育学习路径
=======================================================================================================================

**我个人完全不推荐应试教育学习路径**, 它只会教一些 C++ 语法, 不会教程序设计的思路、方法、原理或技术. 当我说学 C++ 时, 从来都是包括设计哲学、最佳实践、设计模式、惯用法、工具链使用等在内, **这些综合起来才是 C++**.

如果你只是想考试拿高分, 那么 :ref:`非应试自学学习路径` 更简单、更适合你. 如果还有疑虑, 请再阅读上方的学习方法, 并请尝试阅读:

- :doc:`/c_or_cpp`
- :doc:`/ppp2_chapter0`
- :doc:`/ppp3_chapter0`

这里还保留应试教育学习路径, 仅仅是为了告诉你我了解它们, 知道它们有多么糟糕.

-----------------------------------------------------------------------------------------------------------------------
网课参考
-----------------------------------------------------------------------------------------------------------------------

- `嵌入式技术公开课的《C++ Primer Plus》 <https://www.bilibili.com/video/BV1Yv411t7qe>`_
- 黑马程序员

-----------------------------------------------------------------------------------------------------------------------
教材参考
-----------------------------------------------------------------------------------------------------------------------

**看书记得看前言! 看书记得看前言! 看书记得看前言!**

《C++ Primer Plus》
  矮子里的高个, **我针对应试唯一推荐的书**, 看书一个月左右即可速通 C++ 上下册所有内容 (如果感觉看书有难度, 可以先看一部分上面的网课领会).

《C++ 程序设计实践教程（机械工业出版社）》
  部分非电类专业 C++ 用的教材, 虽然不怎么好, 但写得比《C++ 大学教程》清晰地多. 如果不想新买书, 可以考虑用这本.

  但还是有非常非常糟糕的部分, 比如将内置类型和用户自定义类型割裂开来, 明明用户自定义类型的传参等跟内置类型没有区别, 却进行强行解释, 完全不符合 C++ 的设计原则——*为用户自定义类型提供与内置类型同等的支持*.

《C++ How to Program, 9th Edition》(《C++ 大学教程（第9版）》)
  电类 C++ 用的教材, 但 **个人** 完全不推荐, `ACCU 给出最低分的垃圾书 <https://accu.org/bookreviews/2002/haley_791/>`_. 简单列一些问题:

  - 使用 :cpp:`for (int i = 1; i <= 5; ++i)` 而不是更符合语言习惯的 :cpp:`for (int i = 0; i < 5; ++i)`.
  - 使用 :cpp:`explicit` 而不解释为什么, 而且使用方法完全错误.
  - 第一次写构造函数时就用了成员初始化列表且没给出合理解释, 让人以为构造函数不能作为正常函数看待.
  - 第一次用 :cpp:`std::sort` 算法时没有任何解释, 几百页后才解释 :cpp:`std::sort` 到底怎么用.
  - ……

《C++ 程序设计（朱金付主编）》
  快跑!!! 简单列一些问题:

  - 展示拷贝构造函数和拷贝赋值函数时, 参数使用 :cpp:`&`, :doc:`实际应该使用 const& </faq/copy_functions_parameter/main>`.
  - 解释链表时使用有序链表, 导致读者连怎么插入删除都搞不懂.
  - ……

-----------------------------------------------------------------------------------------------------------------------
习题参考
-----------------------------------------------------------------------------------------------------------------------

《C++ Primer Plus》课后习题
  主要是语法的练习. github 上可找到别人完成的版本作为解答的参考.

.. admonition:: 应对上机考试的进阶内容, 有余力可用
  :class: seealso, dropdown

  - :doc:`/faq/range_iterator_and_algorithm/main`
  - `STL "简" 述 (摘自《C++标准库（第 2 版) 》by Nicolai Josuttis <https://gitee.com/cpp_tutorial/board/raw/main/cpp/stl_introduction.pdf>`_
  - `105 STL Algorithms in Less Than an Hour - Jonathan Boccara - CppCon 2018`_
  - `动态规划 入门 <https://www.bilibili.com/video/BV1xb411e7ww>`_
  - `动态规划 套路 <https://www.bilibili.com/video/BV1gp4y1t7xe>`_
  - `递归与分治精讲 <https://leetcode.cn/leetbook/detail/recursion-and-divide-and-conquer/>`_
  - `初级算法 <https://leetcode.cn/leetbook/detail/top-interview-questions-easy/>`_

  尤其是转专业考试, 强烈建议在应试学习基础上学习这些内容, 即学习范围为

  - 课内必修

    - C++98/03 (即应试网课、教材所教授的版本)

    - 淡化指针 (很多地方都能用引用代替)

    - :cpp:`std::string` 基本用法.

    - :cpp:`std::vector<Type>` 基本用法.

  - 可选

    - :cpp:`std::stringstream`: 用于数字和字符串间的转换和分割单词等. 可用于 2023 年计软智转专业上机第 1 题, 秒杀 2022 年网安转专业编写程序题第 1 题.

    - STL 容器基本用法

      - :cpp:`std::vector<Type>`: 动态数组, 且无需手动管理内存.

      - :cpp:`std::array<Type, size>`: 固定长度的数组, 且不会隐式类型转换为首元素的指针.

      - :cpp:`std::map<Key, Value>`: 关联数组. 可秒杀 2021 年计软智转专业第 3 题.

      - :cpp:`std::set<Key>`: 元素唯一且自动排序. 2020 年计软智转专业第 4 题和 2023 年计软智转专业上机第 2 题均考了此概念.

    - STL 算法 + Lambdas

    - C++11 的基于范围的 for 循环 + auto 基本用法

    .. code-block:: cpp
      :linenos:

      // auto: 我不在乎 array 里的元素 value 类型具体是什么, 编译器你自己搞定;
      //       我只要求你把它按 const& 传给 value
      for (const auto& value : array) {
        std::cout << value << ' ';
      }

=======================================================================================================================
C++ 资料查询
=======================================================================================================================

- :doc:`/searching_method/main`.
- `小抄 (可能过于进阶) <https://hackingcpp.com/cpp/cheat_sheets.html>`_.

=======================================================================================================================
C++ 术语不全书
=======================================================================================================================

- `Bjarne Stroustrup's C++ Glossary`_

这一个应该足够了, 遇到不理解的再去查就行, 没必要全部记忆. 其余术语网站可以在 `我的 C++ 浏览器书签 (2024/08/30) (右键另存为再导入到浏览器)`_ 中找到.
