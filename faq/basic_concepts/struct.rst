************************************************************************************************************************
结构体 (struct)
************************************************************************************************************************

有时候 C++ 的内置类型 (整型、浮点型等) 不能满足我们的需求, 我们就需要自己定义新的类型.

结构体允许我们通过已有类型组合得到新的类型:

.. code-block:: cpp
  :linenos:

  struct Student {
    int student_id;  // 学号
    double score;    // 分数
  };

此后就可以像使用内置类型一样使用这个新的类型, 而组成该类型的成员可以用 :cpp:`.` 访问:

.. code-block:: cpp
  :linenos:

  struct Student {
    int student_id;  // 学号
    double score;    // 分数
  };

  int main() {
    Student student = {101, 59.9};
    std::cout << student.student_id;  // 输出学号 101
    std::cout << student.score;       // 输出分数 59.9

    student.score = 60;
    std::cout << student.score;       // 输出分数 60
  }

你当然可以在组合得到的新类型基础上, 继续进行组合:

.. code-block:: cpp
  :linenos:

  struct Point {
    int x;
    int y;
  };

  struct Circle {
    double radius;  // 半径
    Point center;   // 圆心坐标
  };

========================================================================================================================
交叉内容
========================================================================================================================

------------------------------------------------------------------------------------------------------------------------
结构体与函数
------------------------------------------------------------------------------------------------------------------------

.. include:: cross/struct-function.irst

========================================================================================================================
相关解答
========================================================================================================================

- :doc:`/faq/class_invariant/main`
- :doc:`/faq/forward_list/main`