***********************************************************************************************************************
C++ 学习建议
***********************************************************************************************************************

=======================================================================================================================
学习方法
=======================================================================================================================

以下学习方法均参考自 :doc:`/swan_preface`.

.. _跑起来:

-----------------------------------------------------------------------------------------------------------------------
在学会如何走得好看之前，先跑起来
-----------------------------------------------------------------------------------------------------------------------

小孩子学走路从来不是从走路开始的, 而是向前猛跑摔倒几次, 有了走路的整体感觉, 再慢下来对各个过程进行准确的理解.

所以建议先将 C++ 整体内容粗略过一遍再进行细节学习, 这粗略的一遍不需要解决 "C++ 如何做到什么", 只需要解决 "C++ 可以做什么". 知道了可以做什么, 便能有效地学习或提问如何去做. 例如, 你不必掌握函数递归怎么写或怎么分析, 但在这一遍中会知道 C++ 可以进行递归.

-----------------------------------------------------------------------------------------------------------------------
不要记忆技术细节
-----------------------------------------------------------------------------------------------------------------------

二进制原码和补码? 我不知道. :cpp:`int` 的大小? 我不知道. 运算符的结合性和优先级? 我不知道.

我不知道, 因为我没必要知道. 如果实在需要知道 :cpp:`int` 的大小 (它并不固定) 那可以去查, 如果实在不清楚运算符的结合性优先级那可以加括号. 问题在于, 知道这些细节会帮助初学者写出程序吗? 对于初学者, 更重要的是如 :ref:`跑起来` 所述建立起对编程的感性认识. 这些细节并不是学习的重点, 且 **在有了总体认识后很容易补充上**.

考试是闭卷考试, 但编程不是, 编程学习过程也不是. :doc:`/searching_method/main`

-----------------------------------------------------------------------------------------------------------------------
实际编程
-----------------------------------------------------------------------------------------------------------------------

请阅读

- `《人的正确思想是从哪里来的？》`_.
- 或更详细的 `《实践论》`_.
- 或更更详细的 `《辩证法唯物论（讲授提纲）》`_.

明确编程能力不是靠听课听来的, 而是从实际的编程中理解掌握的.

实际的编程并不一定是刷力扣题等 (从考试的角度, 刷力扣题是偏题的; 从编程语言学习的角度, 刷力扣题是有害的), 对于新手来说可以是抄书上例题实际运行进行理解, 可以是对一些突发奇想加以实际验证, 可以是学习练习如何使用软件等等.

-----------------------------------------------------------------------------------------------------------------------
学习使用软件
-----------------------------------------------------------------------------------------------------------------------

软件是你的朋友, 手写代码不报错不算什么能力, 能用合适的软件写代码才是能力. 例如, 建议学习:

- 阅读报错信息.
- :doc:`进行断点调试 </debugger/main>`.
- 如何用软件自动格式化代码 (Visual Studio 里 :KBD:`Ctrl`:KBD:`K`:KBD:`D`, VSCode 里 :KBD:`Shift`:KBD:`Alt`:KBD:`F`).
- :cpp:`#include <cassert>` 里的 :cpp:`assert(condition)`.

**学会这些比多刷几道力扣题提升更大**.

-----------------------------------------------------------------------------------------------------------------------
更多学习方法
-----------------------------------------------------------------------------------------------------------------------

更多学习方法请直接阅读 :doc:`/swan_preface` 了解.

=======================================================================================================================
应试教育学习路径
=======================================================================================================================

-----------------------------------------------------------------------------------------------------------------------
网课参考
-----------------------------------------------------------------------------------------------------------------------

`黑马 C++ <https://www.bilibili.com/video/BV1et411b73Z>`_ 或 `嵌入式技术公开课的《C++ Primer Plus》 <https://www.bilibili.com/video/BV1Yv411t7qe>`_

-----------------------------------------------------------------------------------------------------------------------
教材参考
-----------------------------------------------------------------------------------------------------------------------

《C++ Primer Plus》
  矮子里的高个, **最适合应试的书**, 看书一个月左右即可速通 C++ 上下册所有内容 (如果感觉看书有难度, 可以先看一部分上面的网课领会).

《C++ How to Program, 9th Edition》(《C++ 大学教程，第 9 版》)
  电类 C++ 用的教材, 但 **个人** 完全不推荐, `ACCU 给出最低分的神仙书 <https://accu.org/bookreviews/2002/haley_791/>`_.

《C++ 程序设计实践教程》
  部分非电类专业 C++ 用的教材, 虽然不怎么好, 但写得比《C++ 大学教程》清晰地多. 如果不想新买书, 可以考虑用这本, 缺的内容很容易补回来.

-----------------------------------------------------------------------------------------------------------------------
习题参考
-----------------------------------------------------------------------------------------------------------------------

《C++ Primer Plus》课后习题
  主要是语法的练习.

-----------------------------------------------------------------------------------------------------------------------
应对上机考试的进阶内容，有余力可用
-----------------------------------------------------------------------------------------------------------------------

- `STL "简" 述 (摘自《C++标准库（第 2 版) 》by Nicolai Josuttis <https://gitee.com/cpp_tutorial/board/raw/main/docs/source/src/cpp/stl_solution.pdf>`_
- `105 STL Algorithms in Less Than an Hour - Jonathan Boccara - CppCon 2018`_
- `动态规划 入门 <https://www.bilibili.com/video/BV1xb411e7ww>`_
- `动态规划 套路 <https://www.bilibili.com/video/BV1gp4y1t7xe>`_
- `递归与分治精讲 <https://leetcode.cn/leetbook/detail/recursion-and-divide-and-conquer/>`_
- `初级算法 <https://leetcode.cn/leetbook/detail/top-interview-questions-easy/>`_

尤其是转专业考试，强烈建议在应试学习基础上学习这些内容，即学习范围为

建议的学习范围为

- 课内必修

  - C++98/03 (即应试网课、教材所教授的版本)

  - 淡化指针 (很多地方都能用引用代替)

  - :cpp:`std::string` 基本用法.

  - :cpp:`std::vector<Type>` 基本用法.

- 可选

  - :cpp:`std::stringstream`: 用于数字和字符串间的转换和分割单词等. 可用于 2023 年计软智转专业上机第 1 题, 秒杀 2022 年网安转专业编写程序题第 1 题.

  - STL 容器基本用法

    - :cpp:`std::vector<Type>`: 动态数组, 且无需手动管理内存.

    - :cpp:`std::array<Type, size>`: 固定长度的数组, 且不会隐式类型转换为首元素的指针.

    - :cpp:`std::map<Key, Value>`: 关联数组. 可秒杀 2021 年计软智转专业第 3 题.

    - :cpp:`std::set<Key>`: 元素唯一且自动排序. 可秒杀 2023 年计软智转专业上机第 2 题.

  - STL 算法 + Lambdas

  - C++11 的基于范围的 for 循环 + auto 基本用法

  .. code-block:: cpp

    // auto: 我不在乎 array 里的元素 value 类型具体是什么, 编译器你自己搞定;
    //       我只要求你把它按 const& 传给 value
    for (const auto& value : array) {
      std::cout << value << ' ';
    }

.. _非应试自学学习路径:

=======================================================================================================================
非应试自学学习路径
=======================================================================================================================

- :doc:`/personal_learning_map/main`
- `我的 C++ 浏览器书签 (右键另存为再导入到浏览器)`_

=======================================================================================================================
C++ 资料查询
=======================================================================================================================

- :doc:`/searching_method/main`.
- `小抄 (可能过于进阶) <https://hackingcpp.com/cpp/cheat_sheets.html>`_.

.. _环境配置:

=======================================================================================================================
C++ 环境配置
=======================================================================================================================

- 直接装 `Visual Studio <https://visualstudio.microsoft.com/zh-hans/>`_ 最新版即可用.
- 如需在线编译运行, 可用 `Compiler Explorer <https://godbolt.org/>`_, 此处提供一个 `已配置好提供较多诊断的版本 <https://godbolt.org/z/8Tof9397K>`_.
- `我个人写的 Visual Studio 配置教程`_.
- `我个人写的 VSCode 配置教程`_.

=======================================================================================================================
C++ 术语不全书
=======================================================================================================================

- `Bjarne Stroustrup's C++ Glossary`_

这一个应该足够了, 遇到不理解的再去查就行, 没必要全部记忆. 其余术语网站可以在 `我的 C++ 浏览器书签 (右键另存为再导入到浏览器)`_ 中找到.
