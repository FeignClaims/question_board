************************************************************************************************************************
C.131: 避免平凡的 getters 和 setters
************************************************************************************************************************

.. include:: warning.irst

:coreguidelines:`点此查看原文 <c131-avoid-trivial-getters-and-setters>`

========================================================================================================================
原因
========================================================================================================================

平凡的 getters 或 setters 没有任何语义上的价值; 那些数据成员本可以直接作为公有成员.

========================================================================================================================
示例
========================================================================================================================

.. code-block:: cpp

  class Point {  // 糟糕: 啰嗦的
  public:
    Point(int xx, int yy) : x(xx), y(yy) {}
    int get_x() const {
      return x;
    }
    void set_x(int xx) {
      x = xx;
    }
    int get_y() const {
      return y;
    }
    void set_y(int yy) {
      y = yy;
    }
    // 没有任何特殊行为的成员函数

  private:
    int x;
    int y;
  };

考虑将这样的类定义为 :cpp:`struct` ——即, 不含有特殊行为的数据组合 (不含有不变式), 所有数据是公用, 没有成员函数.

.. code-block:: cpp

  struct Point {
   public:
    int x;
    int y;
  };

========================================================================================================================
注意
========================================================================================================================

该准则的关键是 getter/setter 的语义是否是平凡的 (trivial).

如果不清楚什么是 "平凡的", 考虑如果 getter/setter 是公有成员的话, 是否存在任何的不同.

非平凡的语义可能有:

- 维持类的不变式.
- 在内部数据类型和接口数据类型之间进行的转换.

========================================================================================================================
建议
========================================================================================================================

检查那些仅仅只是访问成员, 而没有特殊行为的 :cpp:`get` 和 :cpp:`set` 函数.