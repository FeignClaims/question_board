************************************************************************************************************************
C.2: 如果类具有不变式则用 :cpp:`class`; 如果数据成员相互独立则使用 :cpp:`struct`
************************************************************************************************************************

.. include:: warning.rst

:coreguidelines:`点此查看原文 <c2-use-class-if-the-class-has-an-invariant-use-struct-if-the-data-members-can-vary-independently>`

简而言之:

- 要么 :cpp:`class` + 构造函数 (+ 私有数据成员).
- 要么 :cpp:`struct` + 无构造函数 (+ 公有数据成员).

========================================================================================================================
原因
========================================================================================================================

- 可读性.
- 易于理解.
- 使用 :cpp:`class` 让程序员意识到需要一个不变式.
- 这是一个有用的惯例.

========================================================================================================================
注意
========================================================================================================================

**不变式** 是一个对象的成员必须满足的逻辑条件, 它由构造函数确立; 公共成员函数必须确保执行前后不变式依然成立.

一旦对象的不变式被确立 (一般由构造函数确立), 类的每个成员函数都可被该对象调用.

不变式可以非正式地说明 (例如在注释中说明, 该类的成员 :cpp:`int value_` 必须大于 :cpp:`0`), 或者通过 :cpp:`Expects` 进行检查 (尚未纳入标准).

如果所有数据成员都可以相互独立地发生改变, 那么不可能存在不变式.

========================================================================================================================
示例
========================================================================================================================

.. code-block:: cpp

  #include <string>

  struct Pair {  // 数据成员间相互独立
   public:
    std::string name;
    int volume;
  };

但是：

.. code-block:: cpp

  class Month { /* ... */};

  class Date {
   public:
    // 验证 {year, month, day} 是合法的日期，然后初始化
    Date(int year, Month month, char day);
    // ...

   private:
    int year_;
    Month month_;
    char day_;
  };

========================================================================================================================
注意
========================================================================================================================

如果一个类具有私有数据成员, 使用者就不能再不使用构造函数的情况下完全初始化该类的对象. 因此, 类的定义者在提供构造函数的同时, 必须确立它的意义. 这实际上意味着定义者需要定义不变式.

.. TODO

.. seealso:: 

  - `将具有私有数据成员的类定义为 class <http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-class>`_
  - `倾向于将接口 (public) 放在 class 的开头 <http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rl-order>`_
  - `尽量不暴露成员 <http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-private>`_
  - `避免 protected 数据成员 <http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rh-protected>`_

========================================================================================================================
建议
========================================================================================================================

检查那些全是私有数据成员的 :cpp:`struct` 和具有公有数据成员的 :cpp:`class`.