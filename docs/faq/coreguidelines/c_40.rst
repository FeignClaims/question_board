************************************************************************************************************************
C.40: 如果类具有不变式, 则定义构造函数
************************************************************************************************************************

========================================================================================================================
原因
========================================================================================================================

这就是构造函数的用途.

========================================================================================================================
示例
========================================================================================================================

.. code-block:: cpp
  :linenos:

  class Date {  // Date 表示一个 [1990 年 1 月 1 日, 2100 年 12 月 31 日] 范围内的有效日期
   public:
    Date(int dd, int mm, int yy) : d{dd}, m{mm}, y{yy} {
      if (!is_valid(d, m, y)) throw Bad_date{};  // 强制保证不变式
    }
    // ...

   private:
      int d, m, y;
  };

通常将不变式表示为构造函数里的 :cpp:`Ensure` (尚未纳入标准) 是一个好主意.

========================================================================================================================
注意
========================================================================================================================

即使类没有不变式, 也可以为了方便起见使用构造函数.

.. code-block:: cpp
  :linenos:

  struct Rec {
   public:
    string s;
    int i{0};
    Rec(string const& ss) : s{ss} {}
    Rec(int ii) : i{ii} {}
  };

  Rec r1{7};
  Rec r1{"Foo bar"};

通常将不变式表示为构造函数里的 :cpp:`Ensure` (尚未纳入标准) 是一个好主意.

========================================================================================================================
注意
========================================================================================================================

C++11 的初始化器列表规则消除了许多构造函数的需要. 例如:

.. code-block:: cpp
  :linenos:

  struct Rec2 {
   public:
    string s;
    int i;
    Rec2(string const& ss, int ii = 0) : s{ss}, i{11} {}  // 多余的
  };

  Rec2 r1{"Foo", 7};
  Rec2 r1{"Bar"};

:cpp:`Rec2` 的构造函数是多余的. 同时, :cpp:`int` 的默认值初始化最好使用 :coreguidelines:`成员初始化器 <c48-prefer-in-class-initializers-to-member-initializers-in-constructors-for-constant-initializers>` 完成.

.. admonition:: 相关核心准则
  :class: coreguidelines

  - :coreguidelines:`C.41: 构造函数应该创建一个完全被初始化的对象 <c41-a-constructor-should-create-a-fully-initialized-object>`.
  - :coreguidelines:`C.42: 如果构造函数不能构造一个有效对象, 抛出一个异常 <c42-if-a-constructor-cannot-construct-a-valid-object-throw-an-exception>`.